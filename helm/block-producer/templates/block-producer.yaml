{{ range $i, $e := until (.Values.blockProducer.numProducers | int)}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ tpl $.Values.blockProducer.fullname $ }}-{{ add $i 1 $.Values.blockProducer.labelOffset }}
  labels:
    app: {{ tpl $.Values.blockProducer.fullname $ }}-{{ add $i 1 $.Values.blockProducer.labelOffset }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ tpl $.Values.blockProducer.fullname $ }}-{{ add $i 1 $.Values.blockProducer.labelOffset }}
  template:
    metadata:
      labels:
        app: {{ tpl $.Values.blockProducer.fullname $ }}-{{ add $i 1 $.Values.blockProducer.labelOffset }}
        testnet: {{ $.Values.testnetName }}
        role: block-producer
        class: {{ $.Values.blockProducer.class }}
        version: {{ (split ":" $.Values.coda.image)._1 }}
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/path: '/metrics'
    spec:
      initContainers:
      - name: fix-perms
        image: busybox
        command:
        - sh
        - -c
        - for dir in keys echo-keys faucet-keys; do [ -d /$dir ] && /bin/cp /$dir/* /wallet-keys; done; /bin/chmod 0700 /wallet-keys
        volumeMounts:
        - name: private-keys
          mountPath: "/keys/"
          readOnly: true
        {{ if has (float64 $i) $.Values.blockProducersWithBots }}
        - name: echo-service-key
          mountPath: "/echo-keys/"
          readOnly: true
        - name: faucet-service-key
          mountPath: "/faucet-keys/"
          readOnly: true
        {{ end -}}
        - name: wallet-keys
          mountPath: /wallet-keys
        securityContext:
          runAsUser: 0
      - name: install-key
        image: {{ $.Values.coda.image }}
        command:
        - bash
        - -c
        - for key in key echo-key faucet-key; do [ ! -f /root/wallet-keys/$key ] || coda accounts import -config-directory /root/.coda-config -privkey-path /root/wallet-keys/$key; done
        volumeMounts:
        - name: wallet-keys
          mountPath: /root/wallet-keys
        - name: config-dir
          mountPath: /root/.coda-config
        env: 
          - name: CODA_PRIVKEY_PASS
            value: {{ $.Values.blockProducer.codaPrivkeyPass | quote }}
      containers:
      {{ if $.Values.agent.active }}
      - name: user-agent
        resources:
          requests:
            memory: 512m
            cpu: 0.1
        image: {{ $.Values.agent.image }}
        command: ["bash"]
        args: ["-c", {{ range $.Values.agent.command }} {{- . | quote }}, {{end}} ]
        env: 
          {{ if ne $.Values.agentMinFee "" -}}
          - name: AGENT_MIN_FEE
            value: {{ $.Values.agentMinFee | quote }}
          {{ end -}}
          {{- if ne $.Values.agentMaxFee "" -}}
          - name: AGENT_MAX_FEE
            value: {{ $.Values.agentMaxFee | quote }}
          {{ end -}}
          {{- if ne $.Values.agentMinTx "" -}}
          - name: AGENT_MIN_TX
            value: {{ $.Values.agentMinTx | quote }}
          {{ end -}}
          {{- if ne $.Values.agentMaxTx "" -}}
          - name: AGENT_MAX_TX
            value: {{ $.Values.agentMaxTx | quote }}
          {{ end -}}
          - name: AGENT_SEND_EVERY_MINUTES
            value: "10"
          - name: CODA_PUBLIC_KEY
            valueFrom:
              secretKeyRef:
                name: {{ $.Values.blockProducer.keySecretTemplatePrefix }}-{{ add $i 1 $.Values.labelOffset }}-key
                key: pub
          - name: CODA_PRIVKEY_PASS
            value: {{ $.Values.blockProducer.codaPrivkeyPass | quote }}
          - name: PYTHONUNBUFFERED
            value: "1"
        ports: 
          - name: metrics
            containerPort: 8000
        imagePullPolicy: Always
      {{ end -}}
      {{- if has (float64 $i) $.Values.blockProducersWithBots }}
      - name: bots
        resources:
          requests:
            memory: 512m
            cpu: 0.1
        image: {{ $.Values.botsImage }}
        env:
          - name: CODA_GRAPHQL_HOST
            value: "0.0.0.0"
          - name: CODA_GRAPHQL_PORT
            value: "3085"
          - name: ECHO_PUBLICKEY
            valueFrom:
              secretKeyRef:
                name: echo-service-key
                key: pub
          - name: ECHO_PASSWORD
            value: {{ $.Values.codaPrivkeyPass | quote }}
          - name: FAUCET_PUBLICKEY
            valueFrom:
              secretKeyRef:
                name: faucet-service-key
                key: pub
          - name: FAUCET_PASSWORD
            value: {{ $.Values.codaPrivkeyPass | quote }}
          - name: DISCORD_API_KEY
            valueFrom:
              secretKeyRef:
                name: o1-discord-api-key
                key: o1discord
          - name: FAUCET_AMOUNT
            value: {{ $.Values.faucetAmount | quote }}
          - name: FEE_AMOUNT
            value: {{ $.Values.faucetFee | quote }}
        imagePullPolicy: Always
      {{ end -}}
      {{- if has (float64 $i) $.Values.blockProducersWithPoints }}
      - name: points
        resources:
          requests:
            memory: 512m
            cpu: 0.1
        image: {{ $.Values.pointsImage }}
        env:
          - name: CODA_GRAPHQL_HOST
            value: "0.0.0.0"
          - name: CODA_GRAPHQL_PORT
            value: "3085"
          - name: GOOGLE_CLOUD_STORAGE_API_KEY
            valueFrom:
              secretKeyRef:
                name: o1-google-cloud-storage-api-key
                key: o1google
        imagePullPolicy: Always
      {{ end -}}
      - name: coda
        resources:
          limits:
            memory: 6.0Gi
          requests:
            memory: 2.0Gi
            cpu: 1
        image: {{ $.Values.coda.image }}
        command: ["/usr/bin/dumb-init", "/root/init_coda.sh"]
        args: [ "daemon",
          "-log-level", {{ $.Values.codaLogLevel }},
          "-log-json",
          {{- if $.Values.logReceivedBlocks }}
          "-log-received-blocks", "true",
          {{- end }}
          "-config-directory", "/root/.coda-config",
          "-client-port", "$(DAEMON_CLIENT_PORT)",
          "-rest-port", "$(DAEMON_REST_PORT)",
          "-insecure-rest-server",
          "-external-port", "$(DAEMON_EXTERNAL_PORT)",
          "-metrics-port", "$(DAEMON_METRICS_PORT)",
          "-block-producer-key", "/root/wallet-keys/key",
          {{- if $.Values.coda.genesis.active }}
          "-genesis-constants", "/genesis_constants/genesis_constants.json",
          {{- end -}}
          {{- range $.Values.coda.seedPeers }}
          "-peer", {{ . | quote }},
          {{- end -}}
        ]
        env:
          - name: DAEMON_REST_PORT
            value: "3085"
          - name: DAEMON_CLIENT_PORT
            value: "8301"
          - name: DAEMON_METRICS_PORT
            value: "10000"
          - name: DAEMON_EXTERNAL_PORT
            value: {{ add $.Values.blockProducer.startingPorts $i $.Values.blockProducer.labelOffset | quote }}
          - name: CODA_PRIVKEY_PASS
            value: {{ $.Values.blockProducer.codaPrivkeyPass | quote }}
        ports:
          - containerPort: {{ add $.Values.blockProducer.startingPorts $i $.Values.blockProducer.labelOffset }}
            hostPort: {{ add $.Values.blockProducer.startingPorts $i $.Values.blockProducer.labelOffset }}
            protocol: TCP
          - name: graphql
            containerPort: 3085
          - name: metrics
            containerPort: 10000
        imagePullPolicy: Always
        volumeMounts:
        - name: wallet-keys
          mountPath: /root/wallet-keys
        - name: config-dir
          mountPath: /root/.coda-config
        {{- if $.Values.coda.genesis.active }}
        - name: genesis-constants
          mountPath: "/genesis_constants/"
        {{- end }}
      volumes:
      - name: private-keys
        secret:
          secretName: {{ $.Values.blockProducer.keySecretTemplatePrefix }}-{{ add $i 1 $.Values.blockProducer.labelOffset }}-key
          defaultMode: 256
          items:
          - key: key
            path: key
          - key: pub
            path: key.pub
      {{ if has (float64 $i) $.Values.blockProducersWithBots }}
      - name: echo-service-key
        secret:
          secretName: echo-service-key
          defaultMode: 256
          items:
          - key: key
            path: echo-key
          - key: pub
            path: echo-key.pub
      - name: faucet-service-key
        secret:
          secretName: faucet-service-key
          defaultMode: 256
          items:
          - key: key
            path: faucet-key
          - key: pub
            path: faucet-key.pub
      {{ end -}}
      - name: wallet-keys
        emptyDir: {}
      - name: config-dir
        emptyDir: {}
      {{- if $.Values.coda.genesis.active }}
      - name: genesis-constants
        configMap:
          name: {{ tpl $.Values.blockProducer.fullname $ }}-{{ add $i 1 $.Values.blockProducer.labelOffset }}-genesis-config
      {{- end }}
---
{{ if $.Values.coda.genesis.active -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ tpl $.Values.blockProducer.fullname $ }}-{{ add $i 1 $.Values.blockProducer.labelOffset }}-genesis-config
  labels:
    app: {{ tpl $.Values.blockProducer.fullname $ }}-{{ add $i 1 $.Values.blockProducer.labelOffset }}
    heritage: {{ $.Release.Service }}
    release: {{ $.Release.Name }}
data:
  genesis_constants.json: |-
    {
        "txpool_max_size": {{ $.Values.coda.genesis.txpool_max_size }},
        "genesis_state_timestamp": {{ $.Values.coda.genesis.genesis_state_timestamp | quote}}
    }
{{- end}}
---
{{ end }}
