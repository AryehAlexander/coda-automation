// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Cmdliner = require("@elliottcable/bs-cmdliner/src/cmdliner.bs.js");
var Keyset$CodaNetwork = require("./Keyset.js");
var Keypair$CodaNetwork = require("./Keypair.js");

process.argv.shift()
;

function keypair(action) {
  if (action !== undefined) {
    if (action === "create") {
      var keypair$1 = Keypair$CodaNetwork.create(undefined);
      console.log(keypair$1.publicKey);
      return Keypair$CodaNetwork.write(keypair$1);
    }
    console.log("Unsupported action: " + action);
    console.log("See --help");
    return ;
  }
  console.log("Please provide an ACTION. See --help.");
  
}

var sdocs = Cmdliner.Manpage.s_common_options;

var action = Cmdliner.Arg.value(Cmdliner.Arg.pos(undefined, 0, Cmdliner.Arg.some(undefined, Cmdliner.Arg.string), undefined, Cmdliner.Arg.info(undefined, "ACTION", undefined, undefined, /* [] */0)));

var keypairCommand_000 = Cmdliner.Term.$(Cmdliner.Term.$$const(keypair), action);

var keypairCommand_001 = Curry.app(Cmdliner.Term.info, [
      undefined,
      undefined,
      undefined,
      undefined,
      sdocs,
      undefined,
      "Create, upload and download keypairs.",
      undefined,
      "keypair"
    ]);

var keypairCommand = /* tuple */[
  keypairCommand_000,
  keypairCommand_001
];

function keyset(action, keysetName) {
  if (action !== undefined) {
    switch (action) {
      case "create" :
          if (keysetName !== undefined) {
            Keyset$CodaNetwork.write(Keyset$CodaNetwork.create(keysetName));
            console.log("Created keyset: " + keysetName);
          } else {
            console.log("Please provide a name for the keyset with -n/--name");
          }
          break;
      case "list" :
      case "ls" :
          console.log(Keyset$CodaNetwork.list(undefined));
          break;
      case "upload" :
          if (keysetName !== undefined) {
            var keyset$1 = Keyset$CodaNetwork.load(keysetName);
            if (keyset$1 !== undefined) {
              Keyset$CodaNetwork.upload(keyset$1);
            } else {
              console.log("The provided keyset does not exist.");
            }
          } else {
            console.log("Unsupported ACTION.");
          }
          break;
      default:
        console.log("Unsupported ACTION.");
    }
  } else {
    console.log("Unsupported ACTION.");
  }
  
}

var sdocs$1 = Cmdliner.Manpage.s_common_options;

var action$1 = Cmdliner.Arg.value(Cmdliner.Arg.pos(undefined, 0, Cmdliner.Arg.some(undefined, Cmdliner.Arg.string), undefined, Cmdliner.Arg.info(undefined, "ACTION", undefined, undefined, /* [] */0)));

var keysetName = Cmdliner.Arg.value(Cmdliner.Arg.opt(undefined, Cmdliner.Arg.some(undefined, Cmdliner.Arg.string), undefined, Cmdliner.Arg.info(undefined, "NAME", undefined, undefined, /* :: */[
              "n",
              /* :: */[
                "name",
                /* [] */0
              ]
            ])));

var keysetCommand_000 = Cmdliner.Term.$(Cmdliner.Term.$(Cmdliner.Term.$$const(keyset), action$1), keysetName);

var keysetCommand_001 = Curry.app(Cmdliner.Term.info, [
      undefined,
      undefined,
      undefined,
      undefined,
      sdocs$1,
      undefined,
      "Generate and manage shared keysets.",
      undefined,
      "keyset"
    ]);

var keysetCommand = /* tuple */[
  keysetCommand_000,
  keysetCommand_001
];

var sdocs$2 = Cmdliner.Manpage.s_common_options;

var defaultCommand_000 = Cmdliner.Term.ret(Cmdliner.Term.$(Cmdliner.Term.$$const((function (param) {
                return /* `Help */[
                        803495649,
                        /* tuple */[
                          /* Pager */-797271261,
                          undefined
                        ]
                      ];
              })), Cmdliner.Term.$$const(undefined)));

var defaultCommand_001 = Curry.app(Cmdliner.Term.info, [
      undefined,
      undefined,
      undefined,
      undefined,
      sdocs$2,
      undefined,
      "simple utility for spinning up coda testnets",
      "0.1.0-alpha",
      "coda-network"
    ]);

var defaultCommand = /* tuple */[
  defaultCommand_000,
  defaultCommand_001
];

var commands_001 = /* :: */[
  keysetCommand,
  /* [] */0
];

var commands = /* :: */[
  keypairCommand,
  commands_001
];

function safeExit(result) {
  if (typeof result === "number" || result[0] !== 17724) {
    return Cmdliner.Term.exit(undefined, result);
  }
  
}

safeExit(Cmdliner.Term.eval_choice(undefined, undefined, undefined, undefined, undefined, defaultCommand, commands));

exports.keypair = keypair;
exports.keypairCommand = keypairCommand;
exports.keyset = keyset;
exports.keysetCommand = keysetCommand;
exports.defaultCommand = defaultCommand;
exports.commands = commands;
exports.safeExit = safeExit;
/*  Not a pure module */
